//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "common/include.h"

//#define OUTPUT_IDC
#define OUTPUT_MAP

BigEndian();

typedef struct(u32 nameTableOffset)
{
    /* 0x00 */ u32 NameOffset;
    u32 Field04;
    /* 0x08 */ u32 Type; // Segment? 2 = .text.1/3
    u32 Field0C;

    FPush();
    FSeek( nameTableOffset + NameOffset );
    string Name;
    FPop();

    local u32 virtualAddress = 0;
    if ( Type == 2 )
    {
        //virtualAddress = 0x80007FC0 + Field04;
        virtualAddress = 0x80007480 + Field04;

#ifdef OUTPUT_IDC
        Printf( "MakeUnkn(0x%08X, 0);MakeCode(0x%08X);MakeFunction(0x%08X, BADADDR);MakeName(0x%08X,\"%s\");\n",
            virtualAddress, virtualAddress, virtualAddress, virtualAddress, Name );
#endif

#ifdef OUTPUT_MAP
        // Dolphin MAP
        Printf( "%08X 0 %08X 0 %s\n", virtualAddress, virtualAddress, Name ); 
#endif

        //Printf( "idc.MakeCode(0x%08X)\nidc.MakeFunction(0x%08X)\n", virtualAddress, virtualAddress );
        //Printf( "idc.MakeName(0x%08X, \"%s\")\n", virtualAddress, Name ); 
        //Printf( "%08X %s\n", virtualAddress, Name );  
    }
    else if ( Type == 0xB )
    {
        //virtualAddress = 0x807049A0 + Field04;
        //Printf( "idc.MakeName(0x%08X, \"%s\")\n", virtualAddress, Name ); 
        //Printf( "%08X 0 %08X 0 %s\n", virtualAddress, virtualAddress, Name );   
    }
    
    
} TSymbol <optimize=false, read=TSymbolToString>;

string TSymbolToString(TSymbol& value)
{
    string str;
    SPrintf( str, "%08X:%s", 0x80007FC0 + value.Field04, value.Name );
    return str;
}

typedef struct
{
    SetRandomBackColor();
    u32 Field00;
    u32 Field04;
    u32 Field08;
    /* 0x0C */ u32 HeaderSize;
    /* 0x10 */ u32 AssemblyNameOffset;
    /* 0x14 */ u32 AssemblyNameSize;
    u32 Field18;
    u32 Field1C;
    u32 Field20;
    u32 Field24;
    u32 Field28;
    u32 Field2C;
    /* 0x30 */ u32 NameTableOffset;
    u32 Field34;
    /* 0x38 */ u32 NameTableOffset2;
    u32 Field3C;
    /* 0x40 */ u32 SymbolTableOffset;
    /* 0x44 */ u32 SymbolTableSize;
    /* 0x48 */ u32 NameTableOffset3;
    /* 0x4C */ u32 NameTableOffset4;
    u32 Field50;
    /* 0x54 */ u32 FileSize;

    if ( SymbolTableOffset != 0 )
    {
        FSeek( SymbolTableOffset );
        struct
        {
            TSymbol SymbolTable(NameTableOffset)[SymbolTableSize / 16];
        } SymbolTable;
    }
} TSelFile;


#ifdef OUTPUT_IDC
Printf( "#include <idc.idc>\nstatic main(){\n" );
#endif

TSelFile File;

#ifdef OUTPUT_IDC
Printf( "}\n" );
#endif
